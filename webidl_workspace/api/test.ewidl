#if Version:atLeast("5.0") then
    /**
     * \brief Test module.
     *
     * Longer description of the test module.
     * This description should be able to span over multiple lines.
     *
     * \version 5.0
     */
    [Exposed=Window]
    module Tizen {

        /**
         * \brief Type alias for testing.
         */
        typedef (optional const integer[]? or HelloWorld) TestTypeAlias;

        /**
         * \brief Hello world interface.
         * \version 5.0
         */
        [
            NoInterfaceObject,

            /**
             * \brief Constructor with two args.
             */
            Constructor(int xx,int yy),

            /**
             * \brief Default constructor.
             */
            Constructor()
        ]
        interface HelloWorld {
            /**
             * \brief x coord.
             */
            attribute x;

            /**
             * \brief y coord.
             */
            attribute y;

            /**
             * \brief Say hi to someone.
             * \param name Name of the person to be greeted.
             *
             * \code{.cpp}
             * function main(args) {
             *  var x = new HelloWorld(10, 20);
             *  x.sayHi(args[0]);
             * }
             * \endcode
             * \output
             * Hello, Tizen @ (10, 20).
             * \endoutput
             */
            (void or integer[])? sayHi(DOMString name) raises (WebAPIException);
        };

        /**
         * \brief Goodbye world interface.
         * \version 5.0
         */
        [
            /**
             * \brief 2 args ctor
             */
            Constructor(int, int),
            /**
             * \brief default ctor.
             */
            Constructor()
        ]
        interface GoodbyeWorld : HelloWorld {
            /**
             * \brief attribute x
             */
            readonly attribute int x;

            /**
             * \brief attribute y
             */
            readonly attribute int y;

            /**
             * \brief attribute z
             */
            readonly attribute int z raises (WebAPIException);
            /**
            * \brief Gets the client object. If not exist, client will be automatically created.
            *
            * \privilegelevel public
            * \privilege http://tizen.org/privilege/mediacontroller.client
            *
            * \return The <em>MediaController Client</em> object.
            *
            * \throw WebAPIException with error type NotSupportedError, if this feature is not supported.
            * \throw WebAPIException with error type SecurityError, if the application does not have the privilege to call this method.
            * \throw WebAPIException with error type UnknownError, if any other error occurs.
            *
            * \code
            * try
            * {
            *   var mcClient = tizen.mediacontroller.getClient();
            * }
            * catch (err)
            * {
            *   console.log(err.name + ": " + err.message);
            * }
            * \endcode
            */
            MediaControllerClient getClient() raises(WebAPIException);
            /**
            * \brief Gets the client object. If not exist, client will be automatically created.
            *
            * \privilegelevel public
            * \privilege http://tizen.org/privilege/mediacontroller.client
            *
            * \param name CLIENT NAME
            *
            * \return The <em>MediaController Client</em> object.
            *
            * \throw WebAPIException with error type NotSupportedError, if this feature is not supported.
            * \throw WebAPIException with error type SecurityError, if the application does not have the privilege to call this method.
            * \throw WebAPIException with error type UnknownError, if any other error occurs.
            *
            * \code
            * try
            * {
            *   var mcClient = tizen.mediacontroller.getClient();
            * }
            * catch (err)
            * {
            *   console.log(err.name + ": " + err.message);
            * }
            * \endcode
            */
            MediaControllerClient getClient(DOMString nameDD, DOMString SURname) raises(WebAPIException);
            /**
            * \brief Saves the playlist in a local database.
            *
            * The <em>errorCallback</em> may be triggered for one of the following errors:
            * <ul>
            *   <li><em>InvalidValuesError</em>: if playlist with given name does not exist.</li>
            *   <li><em>UnknownError</em>: if any other error prevents the function from successful completion.</li>
            * </ul>
            *
            * \remark All playlists will be deleted after the application is closed.
            *
            * \param playlist <em>MediaControllerPlaylist</em> object to save.
            * \param successCallback Function to be called when <em>savePlaylist</em> is finished without error.
            * \param errorCallback Function to be called when <em>savePlaylist</em> fails.
            *
            * \throw WebAPIException with error type TypeMismatchError, if any input parameter is not compatible with the expected type for that parameter.
            * \throw WebAPIException with error type UnknownError, if any other error occurs.
            *
            * \code
            * var mcServer = tizen.mediacontroller.createServer();
            * var playlist = mcServer.playlists.createPlaylist("testPlaylistName");
            * function successCallback()
            * {
            *   console.log("savePlaylist successful.");
            * }
            * function errorCallback(error)
            * {
            *   console.log("savePlaylist failed with error: " + error);
            * }
            * mcServer.playlists.savePlaylist(playlist, successCallback, errorCallback);
            * \endcode
            * \output
            * savePlaylist successful.
            * \endoutput
            */
            void savePlaylist(MediaControllerPlaylist playlist, optional SuccessCallback? successCallback,
                             optional ErrorCallback? errorCallback) raises (WebAPIException);
        };

        /**
         * \brief Enum representing possible color values.
         */
        enum Colors {
            /**
             * \brief RGB(255, 0, 0)
             */
            "RED",
            /**
             * \brief RGB(0, 255, 0)
             */
            "GREEN",
            /**
             * \brief RGB(0, 0, 255)
             */
            "BLUE",
            /**
             * \brief RGB(255, 100, 255)
             */
            "ORANGE",
            /**
             * \brief RGB(0, 200, 200)
             */
            "CYAN",
            /**
             * \brief RGB(1, 2, 3)
             */
            "PURPLE"
        };


        /**
        * \brief The Message identifierdasdasdasdasdasd.
        */
        typedef DOMString[] MessageId;

        /**
        * \brief Simple Brief of dictionary.
        * Additional comment 1.
        * Additional comment 2.
        */
        dictionary SimpleDictionary {
            DOMString attribute1 = asd;
            (DOMString or double) attribute2;
            /**
            * \brief doodah
            * \version 123
            */
            (HelloWorld or int) attrib3 = 1231;
            AbstractFilter filter;
            AttributeFilter Afilter;
            HelloWorld hello;
            ByteStream byteStream;
            Message msg;
            MessageId msgId;
            MessageAttachmentId msgAttId;
            TestTypeAlias ttAlias;
        };

    };
#end -- #if Version:atLeast("5.0") then
